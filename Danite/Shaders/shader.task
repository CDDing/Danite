#version 460
#extension GL_EXT_mesh_shader : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require

layout(local_size_x = 1) in;
struct Plane {
    vec3 normal;
    float dis;
};
struct Frustum {
    Plane topFace;
    Plane bottomFace;
    Plane rightFace;
    Plane leftFace;
    Plane farFace;
    Plane nearFace;
};
layout(set = 0, binding = 0) uniform GlobalBuffer {
    mat4 view;
    mat4 projection;
    mat4 transform;
    Frustum viewFrustum;
    vec3 cameraPosition;
    uint MaxLODCount;
    uint totalClusters;
    float time;
} ubo;
layout(set = 0, binding = 1) uniform sampler2D depthImage;

struct Meshlet {
    uint vertex_offset;
    uint triangle_offset;
    uint vertex_count;
    uint triangle_count;
};

struct Bound{
    vec3 center;
    float radius;
};

struct Cluster{
    Meshlet meshlet;
    Bound bound;
    uint verticesOffset;
    uint trianglesOffset;
    uint childOffset;
    uint childCount;
};

struct Vertex {
    vec3 position;
    float texCoordX;
    vec3 normal;
    float texCoordY;
};

layout(std430, set = 1, binding = 0) readonly buffer ClusterBuffer {
    Cluster clusters[];
} ;

layout(set = 1, binding = 1) readonly buffer MeshletVertexBuffer {
    uint meshlet_vertices[];
} ;

layout(set = 1, binding = 2) readonly buffer MeshletTriangleBuffer {
    uint8_t meshlet_triangles[]; 
} ;

layout(set = 1, binding = 3) readonly buffer VertexBuffer {
    Vertex vertices[];
};

layout(set = 1, binding = 4) readonly buffer LODOffsetBuffer{
    uint LODOffsets[];
};
layout(set = 1, binding = 5) readonly buffer childIndicesBuffer{
    uint childIndices[];
};

#define Width 1600
#define Height 900
#define MAX_LOD 4

struct Payload{
    uint instanceIndex;
    uint drawOffset;
    uint lodLevel;
};
taskPayloadSharedEXT Payload payload;

bool isOnOrForwardPlane(vec3 center, float radius, Plane plane){
    return dot(plane.normal, center) - plane.dis > -radius;
}

bool frustumCulled(Bound bound){

    uint globalIndex = gl_WorkGroupID.x;
    
    uint instanceIndex = globalIndex / ubo.MaxLODCount;

vec3 offset = 0.2 * vec3(float(instanceIndex) / 100.0, (float(instanceIndex % 100) / 10.0), -(instanceIndex % 100) % 10);

    vec3 worldCenter = (ubo.transform * vec4(bound.center,1.f)).xyz + offset;

    vec3 globalScale = vec3(length(ubo.transform[0].xyz),
    length(ubo.transform[1].xyz),
    length(ubo.transform[2].xyz));
   
    float maxScale = max(max(globalScale.x, globalScale.y), globalScale.z);
    float scaledRadius = maxScale * bound.radius;
    

    return isOnOrForwardPlane(worldCenter, scaledRadius, ubo.viewFrustum.leftFace) &&
    isOnOrForwardPlane(worldCenter, scaledRadius, ubo.viewFrustum.rightFace) &&
    isOnOrForwardPlane(worldCenter, scaledRadius, ubo.viewFrustum.farFace) &&
    isOnOrForwardPlane(worldCenter, scaledRadius, ubo.viewFrustum.nearFace) &&
    isOnOrForwardPlane(worldCenter, scaledRadius, ubo.viewFrustum.topFace) &&
    isOnOrForwardPlane(worldCenter, scaledRadius, ubo.viewFrustum.bottomFace);
    
}
bool occlusionCulled(Bound bound){

    uint globalIndex = gl_WorkGroupID.x;
    
    uint instanceIndex = globalIndex / ubo.MaxLODCount;

vec3 offset = 0.2 * vec3(float(instanceIndex) / 100.0, (float(instanceIndex % 100) / 10.0), -(instanceIndex % 100) % 10);

    vec3 worldCenter = (ubo.transform * vec4(bound.center,1.f)).xyz + offset;

        vec3 globalScale = vec3(length(ubo.transform[0].xyz),
    length(ubo.transform[1].xyz),
    length(ubo.transform[2].xyz));
    
    float maxScale = max(max(globalScale.x, globalScale.y), globalScale.z);
    float scaledRadius = maxScale * bound.radius;
    //for mipmap Level
    vec2 min_screen_coord = vec2(1.0, 1.0); 
    vec2 max_screen_coord = vec2(-1.0, -1.0); 

    float max_obj_depth_ndc = -1.0; 
    float min_obj_depth_ndc = 1.0; 

    vec3 offsets[8] = vec3[](
        vec3(scaledRadius, scaledRadius, scaledRadius),
        vec3(scaledRadius, scaledRadius, -scaledRadius),
        vec3(scaledRadius, -scaledRadius, scaledRadius),
        vec3(scaledRadius, -scaledRadius, -scaledRadius),
        vec3(-scaledRadius, scaledRadius, scaledRadius),
        vec3(-scaledRadius, scaledRadius, -scaledRadius),
        vec3(-scaledRadius, -scaledRadius, scaledRadius),
        vec3(-scaledRadius, -scaledRadius, -scaledRadius)
    );

    for(int i=0;i<8;i++){
        vec4 worldPos = vec4(worldCenter + offsets[i],1.0);
        vec4 clipPos = ubo.projection * ubo.view * worldPos;
        if(clipPos.w <= 0.0) continue;

        float inv_w = 1.0 / max(clipPos.w,0.001);

        vec3 ndcPos = clipPos.xyz * inv_w;
        ndcPos.xy = clamp(ndcPos.xy,-1,1);

        min_screen_coord = min(min_screen_coord, ndcPos.xy);
        max_screen_coord = max(max_screen_coord, ndcPos.xy);
        
        min_obj_depth_ndc = min(min_obj_depth_ndc, ndcPos.z);
        max_obj_depth_ndc = max(max_obj_depth_ndc, ndcPos.z);
    }

    vec2 screenResolution = vec2(Width, Height);
    
    vec2 min_pixel_coord = (min_screen_coord * 0.5 + 0.5) * screenResolution;
    vec2 max_pixel_coord = (max_screen_coord * 0.5 + 0.5) * screenResolution;

    vec2 screenSizePixels = max_pixel_coord - min_pixel_coord;
    float maxDimPixels = max(screenSizePixels.x, screenSizePixels.y);

    float mipLevel = int(ceil(log2(maxDimPixels)));
    mipLevel = max(0.0,mipLevel);
    //mipLevel = min(mipLevel , float(13-1)); 
    payload.lodLevel = int(mipLevel);
    
    vec2 coords[4] = {
        min_screen_coord * 0.5 + 0.5,
        max_screen_coord * 0.5 + 0.5,
        vec2(min_screen_coord.x,max_screen_coord.y) * 0.5 + 0.5,
        vec2(max_screen_coord.x,min_screen_coord.y) * 0.5 + 0.5
    };
    
    //sampling
    float hiZ_max_depth = 0.0f;
    for(int i=0;i<5;i++){
        hiZ_max_depth = max(hiZ_max_depth, textureLod(depthImage,coords[i],mipLevel).r);
    }
    
    if(min_obj_depth_ndc > hiZ_max_depth + 0.015) { //bias
        return true;
    }


    return false;
}
bool backFaceCulling(){
    return false;
}

bool isVisible(Bound bound){
    //if(!frustumCulled(bound)){
      //  return false;
    //}

    //if(occlusionCulled(bound)){
     //   return false;
    //}

	return true;
}
void draw(){
    
}
void main(){
	
	
    uint globalIndex = gl_WorkGroupID.x;
    
    uint instanceIndex = globalIndex / ubo.MaxLODCount;
    uint clusterIndex = globalIndex % ubo.MaxLODCount + LODOffsets[MAX_LOD - 1];
	
    payload.instanceIndex = instanceIndex;

    //Root Node
    Cluster c = clusters[clusterIndex];

    bool check = isVisible(c.bound);
    if(check){	
        vec3 offset = 0.2 * vec3(float(instanceIndex) / 100.0, (float(instanceIndex % 100) / 10.0), -(instanceIndex % 100) % 10);

        vec3 worldCenter = (ubo.transform * vec4(c.bound.center,1.f)).xyz + offset;

        float dist = length(ubo.cameraPosition - worldCenter);
        
        int lod = int(
            step(0.5, dist) +
            step(2.0, dist) +
            step(4.0, dist) +
            step(6.0, dist)
        );


        //Draw meshlets currentLOD times

        uint currentLODchildCnt = childIndices[c.childOffset + lod];
        uint drawOffset = c.childOffset + MAX_LOD + 1;
        for(int i=0;i<lod;i++){
            drawOffset += childIndices[c.childOffset + i];
        }
        payload.lodLevel = lod;
        payload.drawOffset = drawOffset;

        EmitMeshTasksEXT(currentLODchildCnt,1,1);
    }
}